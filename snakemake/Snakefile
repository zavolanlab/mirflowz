configfile: "config.yaml"

localrules: finish, download_filter_gtf

#################################################################################
### Finish rule
#################################################################################

rule finish:
	input:
		#trx = os.path.join(config["output_dir"], "GRCh38_96.gene_annotations.filtered.gtf"),
		trx = os.path.join(config["output_dir"], "transcriptome_idtrim.fa"),
		idx_transcriptome = os.path.join(config["output_dir"], "transcriptome_index_segemehl.idx"),
		idx_genome = os.path.join(config["output_dir"], "genome_index_segemehl.idx"),
		exons_bed = os.path.join(config["output_dir"], "exons.bed"),
		header = os.path.join(config["output_dir"], "headerOfCollapsedFasta.sam")

#################################################################################
### Download and filter gtf by transcript_level
#################################################################################

rule download_filter_gtf:
	input:
		script = os.path.join(config["scripts_dir"], "filter_anno_gtf.sh"),
	output:
		gtf = os.path.join(config["output_dir"], "GRCh38_96.gene_annotations.filtered.gtf")
	params:
		cluster_log = os.path.join(config["cluster_log"], "download_filter_gtf.log"),
		prefixname = config["gtf_prefix_name"],
		gtf_url = config["gtf_url"]
	log:
		os.path.join(config["local_log"], "download_filter_gtf.log")
	singularity:
		"docker://zavolab/ubuntu:18.04"
	shell:
		"(bash {input.script} {params.prefixname} {params.gtf_url}) &> {log}"

#################################################################################
### Extract transcriptome sequences in FASTA from genome.
#################################################################################

rule extract_transcriptome_seqs:
	input:
		fasta = config["genome"],
		gtf = os.path.join(config["output_dir"], "GRCh38_96.gene_annotations.filtered.gtf")
	output:
		fasta = os.path.join(config["output_dir"], "transcriptome.fa")
	params:
		cluster_log = os.path.join(config["cluster_log"], "extract_transcriptome_seqs.log")
	log:
		os.path.join(config["local_log"], "extract_transcriptome_seqs.log")
	singularity:
		"docker://zavolab/cufflinks:2.2.1"
	shell:
		"(gffread -w {output.fasta} -g {input.fasta} {input.gtf}) &> {log}"


################################################################################
## Trim transcript IDs from FASTA file
################################################################################

rule trim_fasta:
	input:
		fasta = os.path.join(config["output_dir"], "transcriptome.fa"),
		script =  os.path.join(config["scripts_dir"], "validation_fasta.py")
	output:
		fasta = os.path.join(config["output_dir"], "transcriptome_idtrim.fa")
	params:
		cluster_log = os.path.join(config["cluster_log"], "trim_fasta.log")
	log:
		os.path.join(config["local_log"], "trim_fasta.log")
	shell:
		"(python {input.script} --trim -i {input.fasta} -o {output.fasta}) &> {log}"


#################################################################################
### Generate segemehl index for transcripts
#################################################################################

rule generate_segemehl_index_transcriptome:
	input:
		fasta = os.path.join(config["output_dir"], "transcriptome_idtrim.fa")
	output:
		idx = os.path.join(config["output_dir"], "transcriptome_index_segemehl.idx")
	params:
		cluster_log = os.path.join(config["cluster_log"], "generate_segemehl_index_transcriptome.log"),
	log:
		os.path.join(config["local_log"], "generate_segemehl_index_transcriptome.log")
	resources:
		mem = 10,
		threads = 8,
		time = 6
	singularity:
		"docker://zavolab/segemehl:0.2.0"
	shell:
		"(segemehl.x -x {output.idx} -d {input.fasta}) &> {log}"


#################################################################################
### Generate segemehl index for genome
#################################################################################

rule generate_segemehl_index_genome:
	input:
		sequence = config["genome"]
	output:
		idx = os.path.join(config["output_dir"], "genome_index_segemehl.idx")
	params:
		cluster_log = os.path.join(config["cluster_log"], "generate_segemehl_index_genome.log"),
	log:
		os.path.join(config["local_log"], "generate_segemehl_index_genome.log")
	resources:
		mem = 60,
		threads = 8,
		time = 6
	singularity:
		"docker://zavolab/segemehl:0.2.0"
	shell:
		"(segemehl.x -x {output.idx} -d {input.sequence}) &> {log}"


#################################################################################
### GTF file of exons (genomic coordinates)
#################################################################################

rule get_exons_gtf:
	input:
		gtf = os.path.join(config["output_dir"], "GRCh38_96.gene_annotations.filtered.gtf"),
		script = os.path.join(config["scripts_dir"], "get_lines_w_pattern.sh")
	output:
		exons = os.path.join(config["output_dir"], "exons.gtf")
	params:
		cluster_log = os.path.join(config["cluster_log"], "get_exons_gtf.log")
	log:
		os.path.join(config["local_log"], "get_exons_gtf.log")
	singularity:
		"docker://zavolab/ubuntu:18.04"
	shell:
		"(bash {input.script} -f {input.gtf} -c 3 -p exon -o {output.exons} ) &> {log}"


#################################################################################
### Convert GTF file of exons to BED file
#################################################################################

rule gtftobed:
	input:
		exons = os.path.join(config["output_dir"], "exons.gtf"),
		script = os.path.join(config["scripts_dir"], "gtf_exons_bed.1.1.2.R")
	output:
		exons = os.path.join(config["output_dir"], "exons.bed")
	params:
		cluster_log = os.path.join(config["cluster_log"], "gtftobed.log")
	log:
		os.path.join(config["local_log"], "gtftobed.log")
	singularity:
		"docker://zavolab/r-zavolab:3.5.1"
	shell:
		"(Rscript {input.script} --gtf {input.exons} -o {output.exons}) &> {log}"


#################################################################################
### Create header for SAM file
#################################################################################

rule create_header_genome:
	input:
		genome = config["genome"]
	output:
		header = os.path.join(config["output_dir"], "headerOfCollapsedFasta.sam")
	params:
		cluster_log = os.path.join(config["cluster_log"], "create_header_genome.log")
	log:
		os.path.join(config["local_log"], "create_header_genome.log")
	singularity:
		"docker://zavolab/samtools:1.8"
	shell:
		"(samtools dict -o {output.header} {input.genome}) &> {log}"
