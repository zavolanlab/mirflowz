###############################################################################
# (c) 2020 Paula Iborra, Zavolan Lab, Biozentrum, University of Basel
# (@) paula.iborradetoledo@unibas.ch / paula.iborra@alumni.esci.upf.edu
#
# Snakemake workflow to:
#   - download and prepare the necessary files for smallRNA-seq related workflows.
#   - map small RNA-seq reads (e.g. from miRNA sequencing libraries)
#   - quantify miRNAs, including isomiRs, from miRNA-seq alignments.
#
###############################################################################

import pandas as pd
from snakemake.utils import validate

from pathlib import Path

###############################################################################
### Configuration validation
###############################################################################


configfile: Path(f"{workflow.basedir}/../test/config_lint.yaml")


validate(config, Path("../config/config_schema.json"))


###############################################################################
### Path configuration
###############################################################################


OUT_DIR = Path(config["output_dir"])
TMP_DIR = Path(config["tmp_dir"])
LOG_DIR = Path(f"{config['local_log']}/../")


###############################################################################
### onSuccess/onError handlers configuration
###############################################################################


onsuccess:
    print("\nWORKFLOW SUCCEED. Removing intermediate files.\n")
    shell("rm -rf {TMP_DIR}")


onerror:
    print("\nWORKFLOW FAILED. Check the log file in the LOGS/ directory.\n")
    shell("cat {log} > {LOG_DIR}/failed_workflow.log")


###############################################################################
### Global configuration
###############################################################################


localrules:
    finish,


###############################################################################
### Including subworkflows
###############################################################################


include: Path("rules/prepare.smk")
include: Path("rules/map.smk")
include: Path("rules/quantify.smk")


###############################################################################
### Finish rule
###############################################################################


rule finish:
    input:
        primir_intersect_sam=expand(
            OUT_DIR / "{sample}" / "alignments_intersecting_primir.sam",
            sample=pd.unique(samples_table.index.values),
        ),
        mirna_intersect_sam=expand(
            OUT_DIR / "{sample}" / "alignments_intersecting_mirna.sam",
            sample=pd.unique(samples_table.index.values),
        ),
        table=expand(
            OUT_DIR / "TABLES" / "all_{mir}_counts.tab",
            mir=[mir for mir in config["mir_list"] if mir != "isomir"],
        ),
        uncollapsed_sam=expand(
            OUT_DIR / "{sample}" / "alignments_intersecting_mirna_uncollapsed.sam",
            sample=pd.unique(samples_table.index.values),
        ),
        uncollapsed_bam=expand(
            OUT_DIR
            / "{sample}"
            / "alignments_intersecting_mirna_uncollapsed_sorted.bam",
            sample=pd.unique(samples_table.index.values),
        ),
        uncollapsed_bai=expand(
            OUT_DIR
            / "{sample}"
            / "alignments_intersecting_mirna_uncollapsed_sorted.bam.bai",
            sample=pd.unique(samples_table.index.values),
        ),
