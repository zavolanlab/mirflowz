###############################################################################
# (c) 2020 Paula Iborra, Zavolan Lab, Biozentrum, University of Basel
# (@) paula.iborradetoledo@unibas.ch / paula.iborra@alumni.esci.upf.edu
#
# Snakemake workflow to:
#   - download and prepare the necessary files for smallRNA-seq related workflows.
#   - map small RNA-seq reads (e.g. from miRNA sequencing libraries)
#   - quantify miRNAs, including isomiRs, from miRNA-seq alignments.
#
###############################################################################

import os
import pandas as pd
from snakemake.utils import validate

###############################################################################
### Configuration validation
###############################################################################

validate(config, os.path.join("..", "config", "config_schema.json"))


###############################################################################
### Global configuration
###############################################################################


localrules:
    finish,


###############################################################################
### Including subworkflows
###############################################################################


include: os.path.join("rules", "prepare.smk")
include: os.path.join("rules", "map.smk")
include: os.path.join("rules", "quantify.smk")


###############################################################################
### Finish rule
###############################################################################


rule finish:
    input:
        primir_intersect_sam=expand(
            os.path.join(
                config["output_dir"],
                "{sample}",
                "primir_intersectedAlignments.sam",
            ),
            sample=pd.unique(samples_table.index.values),
        ),
        mirna_intersect_sam=expand(
            os.path.join(
                config["output_dir"],
                "{sample}",
                "mirna_intersectedAlignments.sam",
            ),
            sample=pd.unique(samples_table.index.values),
        ),
        intersect_sam=expand(
            os.path.join(
                config["output_dir"],
                "{sample}",
                "mirna_intersecting_sort_tag.sam",
            ),
            sample=pd.unique(samples_table.index.values),
        ),
        table=expand(
            os.path.join(config["output_dir"], "TABLES", "counts.{mir}.tab"),
            mir=[mir for mir in config["mir_list"] if mir != 'isomir'],
        ),
        uncollapsed_bam=expand(
            os.path.join(
                config["output_dir"],
                "{sample}",
                "uncollapsedSortedMappings_{sample}.bam",
            ),
            sample=pd.unique(samples_table.index.values),
        ),
        uncollapsed_bai=expand(
            os.path.join(
                config["output_dir"],
                "{sample}",
                "uncollapsedSortedMappings_{sample}.bam.bai",
            ),
            sample=pd.unique(samples_table.index.values),
        ),
